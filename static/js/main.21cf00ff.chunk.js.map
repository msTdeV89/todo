{"version":3,"sources":["components/Button.js","redux/actions/actionTypes.js","components/AddTodo.js","redux/actions/todoActions.js","redux/actions/globalActions.js","components/Panel.js","components/Todo.js","components/TodoList.js","App.js","components/Modal.js","redux/reducers/todoReducer.js","redux/reducers/globalReducer.js","redux/reducers/index.js","redux/store.js","index.js"],"names":["Button","text","type","width","fz","padding","func","cls","br","className","style","fontSize","borderRadius","onClick","ADD_TODO","REMOVE_TODO","UPDATE_TODO","CLEAR_LIST","TOGGLE_MODAL","TOGGLE_COMPLETED","connect","addTodo","content","actions","payload","useState","task","setTask","important","setImportant","setValue","e","target","name","value","viewport","document","querySelector","inputElement","useRef","useEffect","current","onfocus","setAttribute","window","innerHeight","autoComplete","onSubmit","preventDefault","id","Math","floor","random","completed","reset","ref","placeholder","onChange","htmlFor","toggleModal","toggleCompleted","hideCompleted","useSelector","state","globalReducer","todos","todoReducer","length","filter","todo","removeTodo","updateTodo","TodoList","todosList","map","App","modalActive","compare","obj","sort","a","b","localStorage","setItem","JSON","stringify","clearList","getLSdata","getItem","parse","initialState","action","rootReducer","combineReducers","store","createStore","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.21cf00ff.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Button = ({ text, type, width, fz, padding, func, cls, br }) => {\r\n  return (\r\n    <button\r\n      className={cls}\r\n      style={{ width, fontSize: fz, padding, borderRadius: br }}\r\n      type={type ? type : null}\r\n      onClick={func}\r\n    >\r\n      {text}\r\n    </button>\r\n  );\r\n};\r\n\r\nexport default Button;\r\n","// TODO\r\nexport const ADD_TODO = \"ADD_TODO\";\r\nexport const REMOVE_TODO = \"REMOVE_TODO\";\r\nexport const UPDATE_TODO = \"UPDATE_TODO\";\r\nexport const CLEAR_LIST = \"CLEAR_LIST\";\r\n// GLOBAL\r\nexport const TOGGLE_MODAL = \"TOGGLE_MODAL\";\r\nexport const TOGGLE_COMPLETED = \"TOGGLE_COMPLETED\";\r\n","import React, { useState, useRef, useEffect } from \"react\";\r\nimport Button from \"./Button\";\r\nimport { connect } from \"react-redux\";\r\nimport { addTodo } from \"../redux/actions/todoActions\";\r\n\r\nconst AddTodo = ({ addTodo }) => {\r\n  const [task, setTask] = useState(\"\");\r\n  const [important, setImportant] = useState(false);\r\n\r\n  const setValue = (e) => {\r\n    if (e.target.name === \"addTodo\") setTask(e.target.value);\r\n    if (e.target.name === \"important\") setImportant(!important);\r\n  };\r\n\r\n  const randomId = () => Math.floor(Math.random() * 9999999999999);\r\n\r\n  const viewport = document.querySelector(\"meta[name=viewport]\");\r\n\r\n  const inputElement = useRef(null);\r\n\r\n  useEffect(() => {\r\n    inputElement.current.onfocus = () => {\r\n      viewport.setAttribute(\r\n        \"content\",\r\n        viewport.content + \", height=\" + window.innerHeight\r\n      );\r\n    };\r\n  });\r\n\r\n  return (\r\n    <form\r\n      autoComplete='off'\r\n      onSubmit={(e) => {\r\n        e.preventDefault();\r\n        if (task)\r\n          addTodo({ id: randomId(), task, important, completed: false });\r\n        document.querySelector(\"form\").reset();\r\n        setImportant(false);\r\n        setTask(\"\");\r\n      }}\r\n    >\r\n      <input\r\n        className='add-todo'\r\n        ref={inputElement}\r\n        name='addTodo'\r\n        type='text'\r\n        value={task}\r\n        placeholder='Todo . . .'\r\n        onChange={(e) => setValue(e)}\r\n      />\r\n      <div className='add-todo-option'>\r\n        <label htmlFor='important'>\r\n          <input\r\n            type='checkbox'\r\n            name='important'\r\n            onClick={(e) => setValue(e)}\r\n          />\r\n          <span>Important</span>\r\n        </label>\r\n        <Button\r\n          text='Add'\r\n          type='submit'\r\n          width='90px'\r\n          fz='1rem'\r\n          padding='5px 0'\r\n          br='10px'\r\n        />\r\n      </div>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default connect(null, { addTodo })(AddTodo);\r\n","import * as actions from \"./actionTypes\";\r\n\r\nexport const addTodo = (content) => ({\r\n  type: actions.ADD_TODO,\r\n  payload: { content },\r\n});\r\n\r\nexport const removeTodo = (id) => ({\r\n  type: actions.REMOVE_TODO,\r\n  payload: { id },\r\n});\r\n\r\nexport const updateTodo = (id) => ({\r\n  type: actions.UPDATE_TODO,\r\n  payload: { id },\r\n});\r\n\r\nexport const clearList = () => ({\r\n  type: actions.CLEAR_LIST,\r\n});\r\n","import * as actions from \"./actionTypes\";\r\n\r\nexport const toggleModal = () => ({\r\n  type: actions.TOGGLE_MODAL,\r\n});\r\n\r\nexport const toggleCompleted = () => ({\r\n  type: actions.TOGGLE_COMPLETED,\r\n});\r\n","import React from \"react\";\r\nimport Button from \"./Button\";\r\nimport { connect } from \"react-redux\";\r\nimport { toggleModal, toggleCompleted } from \"../redux/actions/globalActions\";\r\nimport { useSelector } from \"react-redux\";\r\n\r\nconst Panel = ({ toggleModal, toggleCompleted }) => {\r\n  const hideCompleted = useSelector(\r\n    (state) => state.globalReducer.hideCompleted\r\n  );\r\n  const todos = useSelector((state) => state.todoReducer);\r\n  return (\r\n    <div className='panel'>\r\n      <Button\r\n        text='Clear List'\r\n        width='145px'\r\n        func={() => {\r\n          if (todos.length > 0) toggleModal();\r\n        }}\r\n      />\r\n      <Button\r\n        text={hideCompleted ? \"Show Completed\" : \"Hide Completed\"}\r\n        width='145px'\r\n        func={() => {\r\n          const completedTodos = todos.filter(\r\n            (todo) => todo.completed === true\r\n          );\r\n          if (completedTodos.length > 0) toggleCompleted();\r\n        }}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default connect(null, { toggleModal, toggleCompleted })(Panel);\r\n","import React from \"react\";\r\nimport { FaTrash } from \"react-icons/fa\";\r\nimport { connect } from \"react-redux\";\r\nimport { removeTodo, updateTodo } from \"../redux/actions/todoActions\";\r\n\r\nconst Todo = ({ id, task, completed, important, removeTodo, updateTodo }) => {\r\n  return (\r\n    <div\r\n      className={\r\n        completed && important\r\n          ? \"todo completed important\"\r\n          : important\r\n          ? \"todo important\"\r\n          : completed\r\n          ? \"todo completed\"\r\n          : \"todo\"\r\n      }\r\n    >\r\n      <p className='todo-name' onClick={() => updateTodo(id)}>\r\n        {task}\r\n      </p>\r\n      <FaTrash className='trash' onClick={() => removeTodo(id)} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default connect(null, { removeTodo, updateTodo })(Todo);\r\n","import React from \"react\";\r\nimport Todo from \"./Todo\";\r\nimport { useSelector } from \"react-redux\";\r\n\r\nconst TodoList = () => {\r\n  const todos = useSelector((state) => state.todoReducer);\r\n  const hideCompleted = useSelector(\r\n    (state) => state.globalReducer.hideCompleted\r\n  );\r\n\r\n  const todosList = todos\r\n    .filter((todo) => (hideCompleted ? todo.completed !== true : todo))\r\n    .map((todo) => (\r\n      <Todo\r\n        key={todo.id}\r\n        id={todo.id}\r\n        task={todo.task}\r\n        completed={todo.completed}\r\n        important={todo.important}\r\n      />\r\n    ));\r\n\r\n  return (\r\n    <div className='todo-list'>\r\n      {todos.length > 0 ? (\r\n        todosList\r\n      ) : (\r\n        <h2 className='no-tasks'>No tasks at the moment.</h2>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TodoList;\r\n","import React, { useEffect } from \"react\";\nimport AddTodo from \"./components/AddTodo\";\nimport Panel from \"./components/Panel\";\nimport TodoList from \"./components/TodoList\";\nimport { useSelector } from \"react-redux\";\n\nconst App = () => {\n  const todos = useSelector((state) => state.todoReducer);\n  const modalActive = useSelector((state) => state.globalReducer.modalActive);\n\n  const compare = (obj) => {\n    if (obj.important && !obj.completed) return 4;\n    if (!obj.important && !obj.completed) return 3;\n    if (obj.completed && obj.important) return 2;\n    if (obj.completed && !obj.important) return 1;\n  };\n\n  todos.sort((a, b) => compare(b) - compare(a));\n\n  useEffect(() => {\n    localStorage.setItem(\"todos\", JSON.stringify(todos));\n  }, [todos]);\n\n  return (\n    <div className={modalActive ? \"container hide\" : \"container\"}>\n      <AddTodo />\n      <Panel />\n      <TodoList />\n    </div>\n  );\n};\n\nexport default App;\n","import React from \"react\";\r\nimport Button from \"./Button\";\r\nimport { connect } from \"react-redux\";\r\nimport { toggleModal } from \"../redux/actions/globalActions\";\r\nimport { clearList } from \"../redux/actions/todoActions\";\r\nimport { useSelector } from \"react-redux\";\r\n\r\nconst Modal = ({ toggleModal, clearList }) => {\r\n  const modalActive = useSelector((state) => state.globalReducer.modalActive);\r\n\r\n  return (\r\n    <div className={modalActive ? \"modal-container show\" : \"modal-container\"}>\r\n      <div className='modal'>\r\n        <p>Are you sure?</p>\r\n        <div className='modal-btns'>\r\n          <Button\r\n            text='yes'\r\n            width='90px'\r\n            func={() => {\r\n              toggleModal();\r\n              clearList();\r\n            }}\r\n          />\r\n          <Button text='no' width='90px' func={toggleModal} />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default connect(null, { toggleModal, clearList })(Modal);\r\n\r\n//\r\n","import * as actions from \"../actions/actionTypes\";\r\n\r\nconst getLSdata = () => {\r\n  if (localStorage.getItem(\"todos\")) {\r\n    return JSON.parse(localStorage.getItem(\"todos\"));\r\n  } else {\r\n    localStorage.setItem(\"todos\", JSON.stringify([]));\r\n  }\r\n};\r\n\r\nconst initialState = getLSdata() ? getLSdata() : [];\r\n\r\nconst todoReducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case actions.ADD_TODO:\r\n      return [\r\n        ...state,\r\n        {\r\n          ...action.payload.content,\r\n        },\r\n      ];\r\n    case actions.UPDATE_TODO:\r\n      return state.map((todo) =>\r\n        todo.id === action.payload.id\r\n          ? { ...todo, completed: !todo.completed }\r\n          : todo\r\n      );\r\n    case actions.REMOVE_TODO:\r\n      return state.filter((todo) => todo.id !== action.payload.id);\r\n    case actions.CLEAR_LIST:\r\n      return (state = []);\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default todoReducer;\r\n","import * as actions from \"../actions/actionTypes\";\r\n\r\nconst initialState = { modalActive: false, hideCompleted: false };\r\n\r\nconst globalReducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case actions.TOGGLE_MODAL:\r\n      return { ...state, modalActive: !state.modalActive };\r\n    case actions.TOGGLE_COMPLETED:\r\n      return { ...state, hideCompleted: !state.hideCompleted };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default globalReducer;\r\n","import { combineReducers } from \"redux\";\r\nimport todoReducer from \"./todoReducer\";\r\nimport globalReducer from \"./globalReducer\";\r\n\r\nconst rootReducer = combineReducers({ todoReducer, globalReducer });\r\n\r\nexport default rootReducer;\r\n","import { createStore } from \"redux\";\r\nimport rootReducer from \"./reducers/index\";\r\n\r\nconst store = createStore(rootReducer);\r\n\r\nexport default store;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport Modal from \"./components/Modal\";\nimport { Provider } from \"react-redux\";\nimport store from \"./redux/store\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n      <Modal />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}